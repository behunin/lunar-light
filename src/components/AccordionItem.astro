---
interface Props {
  header: string;
  index: number;
  children: any;
}

const { header, index } = Astro.props;
---

<accord-ion-item>
  <h3>
    <button
      id=`accordion-header-${index}`
      class="accordion__header"
      aria-expanded="false"
      aria-controls=`accordion-panel-${index}`
    >
      {header}
      <svg
        class="header__toggle-indicator"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 448 512"
      >
        <path
          fill="currentColor"
          d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
        ></path>
      </svg>
    </button>
  </h3>
  <div
    id=`accordion-panel-${index}`
    role="region"
    class="accordion__panel"
    aria-labelledby=`accordion-header-${index}`
  >
    <div class="panel__inner">
      <slot />
    </div>
  </div>
</accord-ion-item>

<script>
  class AccordionItem extends HTMLElement {
    constructor() {
      super();

      const resizeObserver = new ResizeObserver((entries) => {
        entries.forEach((entry) => {
          if (
            !entry.target.parentElement?.parentElement?.classList.contains(
              "is-active",
            )
          ) {
            return;
          }
          const panel = entry.target.parentElement;
          panel.style.height = `${entry.contentRect.height + 35}px`;
        });
      });

      resizeObserver.observe(this.lastElementChild?.firstElementChild!);
    }
  }

  customElements.define("accord-ion-item", AccordionItem);
</script>

<style>
  accord-ion-item,
  .accordion__header {
    width: 100%;
  }

  .accordion__header {
    display: flex;
    justify-content: space-between;
    border: 2px solid #a7a3a3;
    padding: 1rem;
  }

  accord-ion-item .accordion__header {
    border-bottom: 0;
  }

  accord-ion-item .accordion__header:focus {
    outline-offset: -6px;
    box-shadow: inset 0 0 0 2px white;
  }

  accord-ion-item:only-of-type .accordion__header,
  accord-ion-item:last-of-type .accordion__header {
    border: 2px solid #a7a3a3;
  }

  accord-ion-item:only-of-type .accordion__panel,
  accord-ion-item:last-of-type .accordion__panel {
    border-bottom: 2px solid #a7a3a3;
  }

  .header__toggle-indicator {
    width: 20px;
  }

  .accordion__panel {
    visibility: hidden;
    overflow: hidden;
    height: 0;
    border-left: 2px solid #a7a3a3;
    border-right: 2px solid #a7a3a3;
    transition:
      height 0.3s ease-in-out,
      visibility 0s 0.3s;
  }

  .panel__inner {
    padding: 2rem 1rem;
  }

  .is-active .accordion__header {
    border: 2px solid #a7a3a3;
  }

  .is-active .accordion__panel {
    visibility: visible;
    height: auto;
    transition:
      height 0.3s ease-in-out,
      visibility 0s 0s;
  }
</style>
