---
import Layout from "../../layouts/Layout.astro";
import json2html from "../../components/JsonViewer";
import Accordion from "../../components/Accordion.astro";
import AccordionItem from "../../components/AccordionItem.astro";

import "../../styles/game.css";

export const prerender = false;

interface Value {
  value: string;
}

interface Uri {
  uri: string;
}

interface Playable {
  name: Value[];
  tid: Value[];
}
interface Report {
  description?: string;
  device_details: string;
  id: number;
  label: string;
  changed: string;
  author: string;
  version: string;
  playability: Playable[];
  screenshots: Value[];
}

interface Game {
  data: {
    gameByID: {
      description: string;
      id: number;
      title: string;
      titleLocalizations: Map<number, string>;
      applicationId: string;
      summary: string;
      images?: Uri[];
      reports: Report[];
    };
  };
}

const id = Astro.params.id;

const myHeaders = new Headers();
myHeaders.append("Accept", "application/json");

let error = false;
const res: Game = await fetch(
  `https://staging.yuzu-emu.org/gaaaraph?queryId=gameByID&variables={"id":${id}}`,
  { headers: myHeaders, method: "GET" },
)
  .then(async (res) => {
    if (!res.ok) throw "FAIL";
    return await res.json();
  })
  .catch((e) => {
    error = true;
    console.error(e);
  });

if (error) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}
---

<script>
  document.addEventListener("load", () => {
    const toggles = document.querySelectorAll<HTMLLinkElement>("a.json-toggle");
    toggles.forEach((el) => {
      el.addEventListener("click", (ev) => {
        ev.preventDefault();
        ev.stopImmediatePropagation();
        const toggle = ev.target! as HTMLElement;
        toggle.classList.toggle("collapsed");
        toggle.nextElementSibling!.classList.toggle("invisible");
        toggle.nextElementSibling!.classList.toggle("h-0");
        toggle.nextElementSibling!.nextElementSibling!.classList.toggle(
          "hidden",
        );
      });
    });

    const place_holder =
      document.querySelectorAll<HTMLLinkElement>("a.json-placeholder");
    place_holder.forEach((el) => {
      el.addEventListener("click", (ev) => {
        ev.preventDefault();
        ev.stopImmediatePropagation();
        const toggle = ev.target! as HTMLElement;
        toggle.previousElementSibling?.previousElementSibling?.dispatchEvent(
          new Event("click"),
        );
      });
    });
  });
</script>

<Layout title={res.data.gameByID.title}>
  <main>
    <section
      class="container grid grid-flow-row items-center justify-center text-secondary dark:text-primary"
    >
      <div>
        <h1 class="py-2 text-center text-4xl font-bold">
          {res.data.gameByID.title}
        </h1>
      </div>
      <div class="grid grid-flow-row gap-1 md:grid-flow-col">
        {
          res.data.gameByID.images && (
            <img src={`${res.data.gameByID.images[0].uri}`} />
          )
        }
        <div set:html={res.data.gameByID.description} />
      </div>
      <div class="w-full">
        <table class="table-auto">
          <tbody>
            <tr>
              <td>
                <div class="is-square" style="background-color: #5c93ed"></div>
                 Perfect
              </td>
              <td
                >Game functions flawless with no audio or graphical glitches,
                all tested functionality works as intended without any
                workarounds needed.</td
              >
            </tr>

            <tr>
              <td>
                <div class="is-square" style="background-color: #47d35c"></div>
                 Great
              </td>
              <td
                >Game functions with minor graphical or audio glitches and is
                playable from start to finish. May require some workarounds.</td
              >
            </tr>

            <tr>
              <td>
                <div class="is-square" style="background-color: #94b242"></div>
                 Okay
              </td>
              <td
                >Game functions with major graphical or audio glitches, but game
                is playable from start to finish with workarounds.</td
              >
            </tr>

            <tr>
              <td>
                <div class="is-square" style="background-color: #f2d624"></div>
                 Bad
              </td>
              <td
                >Game functions, but with major graphical or audio glitches.
                Unable to progress in specific areas due to glitches even with
                workarounds.</td
              >
            </tr>

            <tr>
              <td>
                <div class="is-square" style="background-color: red"></div>
                 Intro/Menu
              </td>
              <td
                >Game is completely unplayable due to major graphical or audio
                glitches. Unable to progress past the Start Screen.</td
              >
            </tr>

            <tr>
              <td>
                <div class="is-square" style="background-color: #828282"></div>
                 Won't Boot
              </td>
              <td>The game crashes when attempting to startup.</td>
            </tr>

            <tr>
              <td>
                <div class="is-square" style="background-color: black"></div>
                 Not Tested
              </td>
              <td>The game has not yet been tested.</td>
            </tr>
          </tbody>
        </table>
      </div>
      {
        res.data.gameByID.reports ? (
          <>
            <h2 class="py-1 text-2xl font-bold">Compatibility Reports</h2>
            <Accordion>
              {res.data.gameByID.reports.map((report, idx) => (
                <AccordionItem
                  header={
                    report.id + " -- " + report.author + " -- " + report.label
                  }
                  index={idx}
                >
                  <div class="grid grid-flow-row items-center justify-start">
                    <h2>Report ID: {report.id}</h2>
                    <div class="flex">
                      <span>Description:</span>
                      &nbsp;
                      {report.description && (
                        <div set:html={report.description} />
                      )}
                    </div>
                    <div>
                      Playability: {report.playability[0].name[0].value}
                    </div>
                    {report.screenshots && (
                      <div class="grid grid-flow-row items-center justify-center">
                        {report.screenshots.map((img) => (
                          <img class="w-1/2" src={img.value} />
                        ))}
                      </div>
                    )}
                    <div>Author: {report.author}</div>
                    <div>Last Updated: {new Date(report.changed)}</div>
                    <div class="flex">
                      Device Details:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      {report.device_details && (
                        <span class="inline-flex">
                          <div
                            class="json-html grid"
                            set:html={
                              '<a href class="json-toggle collapsed"></a>' +
                              json2html(JSON.parse(report.device_details), {})
                            }
                          />
                        </span>
                      )}
                    </div>
                  </div>
                </AccordionItem>
              ))}
            </Accordion>
          </>
        ) : (
          <h2 class="py-1 text-2xl font-bold">No Reports</h2>
        )
      }
    </section>
  </main>
</Layout>

<style>
  .is-square {
    display: inline-block;
    width: 16px;
    height: 16px;
  }
</style>
